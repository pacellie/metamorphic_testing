from collections import defaultdict
from functools import wraps
from .metamorphic import MetamorphicTest
import inspect
from .transforms import identity
from .relations import equality

# global two level dictionary which maps module names to test names to the actual test instance
# e.g. suites['test_sin']['A'] retrieves test 'A' from the file 'test_sin'.
suites: defaultdict = defaultdict(lambda: defaultdict(MetamorphicTest))

# name: name of the metamorphic test
# transform: optional transformation function
# relation: optional relation function
# (1) create a new instance of a metamorphic test
#     for now the transform just receives the default priority 0 -> change later?
# (2) retrieve the module of the caller of this function
# (3) register the test in the global suites variable
# (4) return the name as a handle to the caller
def metamorphic(name, transform=identity, relation=equality):
    suite = MetamorphicTest(name=name, transforms=[(transform, 0)], relation=relation)

    frame = inspect.stack()[1]
    module = inspect.getmodule(frame[0])

    suites[module.__name__][name] = suite

    return name


# arg: the name of a parameter
# generator: either a plain value or a function of the form 'lambda: value'
# transform: transformation function we are wrapping
# randomize the argument arg by the value generated by the generator by setting
# overriding the value of arg in the given kwargs
def randomized(arg, generator):
    def wrapper(transform):
        @wraps(transform)
        def parametrized_transform(*args, **kwargs):
            kwargs[arg] = generator() if callable(generator) else generator
            return transform(*args, **kwargs)

        return parametrized_transform

    return wrapper


# metamorphic_name: name of a metamorphic test
# priority: priority of the transform
# transform: transformation function we are wrapping
# update the metamorphic test in the global suites variable by appending the
# (transform, priority) pair to the already present transformations of the given
# metamorphic test
def transformation(metamorphic_name, priority=0):
    def wrapper(transform):
        suites[transform.__module__][metamorphic_name].transforms.append((transform, priority))
        return transform

    return wrapper


# metamorphic_name: name of a metamorphic test
# relation: relation function we are wrapping
# update the metamorphic test in the global suites variable by setting the relation
# of the given metamorphic test
def relation(metamorphic_name):
    def wrapper(relation):
        suites[relation.__module__][metamorphic_name].relation = relation
        return relation

    return wrapper


# test: the system under test function
# x: the actual input
# execute all the tests of this module in the global suites variable by delegating
# the the execute function of the MetamorphicTest class
def system(test):
    def execute(x):
        for suite in suites[test.__module__]:
            suites[test.__module__][suite].execute(x, test)

    return execute
