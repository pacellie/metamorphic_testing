default:
    image: python:3.8
    before_script:  # poetry virtual env initialization
        - pip install poetry
        - export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
        - poetry install --no-ansi --no-interaction
        - source `poetry env info --path`/bin/activate

stages:
    - test
    - linter
    - publish
    - examples

include:
    - template: Code-Quality.gitlab-ci.yml

variables:
    LANG: C.UTF-8

pytest:
    stage: test
    script:
        - echo "This is the coverage test stage"
        - coverage run -m pytest tests --junitxml=report.xml
        - coverage report
        - coverage xml
    coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
    artifacts:
        name: "$CI_JOB_NAME"
        when: always
        reports:
            junit: report.xml
            coverage_report:
                coverage_format: cobertura
                path: coverage.xml

code_quality:
    stage: test
    artifacts:
        paths: [gl-code-quality-report.json]
    rules:
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

prospector:
    stage: linter
    script:
        - echo "This is the prospector linter stage"
        - poetry run lint

publishing:
    stage: publish
    needs: [coverage, prospector]
    script:
        - echo "This is the publish stage"
        - poetry config repositories.gitlab https://gitlab.lrz.de/api/v4/projects/$CI_PROJECT_ID/packages/pypi
        - poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
        - poetry publish -r gitlab --build
        - echo "Publishing done!"
    only:
        - main
    when: manual


simple_example:
    stage: example
    allow_failure: true
    script:
        - poetry run example simple

trigonometry_example:
    stage: example
    allow_failure: true
    script:
        - poetry run example trigonometry

house_pricing_example:
    stage: example
    allow_failure: true
    script:
        - poetry run example house_pricing
